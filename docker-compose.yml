version: "3.8"
services:
  backend:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    volumes:
      - ./backend:/app
    environment:
      - FLASK_ENV=development
      - AI_API_KEY=${AI_API_KEY}
      - DATABASE_URL=postgresql://postgres:example@db:5432/dfa
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    ports:
      - "5000:5000"
    depends_on:
      - db
      - redis

  frontend:
    image: node:20-alpine
    working_dir: /app
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0 --port 5173"
    ports:
      - "5173:5173"
    environment:
      - CHOKIDAR_USEPOLLING=true
    depends_on:
      - backend

  db:
    image: postgres:15
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: example
      POSTGRES_DB: dfa
    volumes:
      - pgdata:/var/lib/postgresql/data
    ports:
      - "5432:5432"

  redis:
    image: redis:7
    ports:
      - "6379:6379"

  celery_worker:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    command: celery -A celery_app.celery worker --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - FLASK_ENV=development
      - AI_API_KEY=${AI_API_KEY}
      - DATABASE_URL=postgresql://postgres:example@db:5432/dfa
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - backend
      - db
      - redis

  celery_beat:
    build:
      context: .
      dockerfile: ./backend/Dockerfile
    command: celery -A celery_app.celery beat --loglevel=info
    volumes:
      - ./backend:/app
    environment:
      - FLASK_ENV=development
      - AI_API_KEY=${AI_API_KEY}
      - DATABASE_URL=postgresql://postgres:example@db:5432/dfa
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    depends_on:
      - backend
      - db
      - redis

volumes:
  pgdata:
